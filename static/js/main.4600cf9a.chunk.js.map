{"version":3,"sources":["Containers/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","getDatafromUrl","a","array","csv","delimiter","fromStream","request","get","subscribe","json","Promise","resolve","reject","push","splice","length","setState","json_data","setSearchValue","event","searchValue","target","value","removeSearch","searching","onSearchClick","filtered_elements","getFilteredData","filtered_data","onFilterClick","name","id","filtering","console","log","state","action","filter_type","filter_value","result","filter","ele","schoolname","toLowerCase","includes","address","schoolid","pincode","landmark","area","toggleFilter","getPossibleFilters","genderFilters","genderToggle","categoryFilters","categoryToggle","mediumFilters","mediumToggle","set","Set","add","getArray","removeFilters","sorting","getSortedData","filterType","direction","sorted_data","data","sort","ele1","ele2","this","className","placeholder","type","onChange","onClick","map","key","gender","category","medium_of_inst","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4600cf9a.chunk.js","sourcesContent":["// JavaScript source code\r\n\r\nimport React, { Component } from \"react\";\r\nimport csv from \"csvtojson\";\r\nimport request from \"request\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './Table.css'\r\n\r\nclass Table extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            json_data: [],\r\n            filtered_data: [],\r\n            searching: false,\r\n            searchValue: '',\r\n            sorting: false,\r\n            filtering: false,\r\n            genderToggle: false,\r\n            categoryToggle: false,\r\n            mediumToggle: false,\r\n            genderFilters: [],\r\n            categoryFilters: [],\r\n            mediumFilters: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDatafromUrl();\r\n\r\n    }\r\n\r\n    //function to get data in csv format and convert to json\r\n    getDatafromUrl = async () => {\r\n        let array = [];\r\n        await csv({ delimiter: [\"|\"] })\r\n            .fromStream(\r\n                request.get(\r\n                    \"https://raw.githubusercontent.com/openbangalore/bangalore/master/bangalore/Education/Bangalore_schools.csv\"\r\n                )\r\n            )\r\n            .subscribe((json) => {\r\n                return new Promise((resolve, reject) => {\r\n\r\n                    resolve(array.push(json));\r\n                    // long operation for each json e.g. transform / write into database.\r\n                });\r\n            });\r\n\r\n        //remove first and last elemts since not needed\r\n        array = array.splice(1, array.length - 2);\r\n        this.setState({ json_data: array });\r\n\r\n    }\r\n\r\n\r\n    //set Search value in state\r\n    setSearchValue = (event) => {\r\n        this.setState({ searchValue: event.target.value });\r\n    }\r\n\r\n\r\n    //sets searching toggle to false\r\n    removeSearch = () => {\r\n        this.setState({ searching: false });\r\n    }\r\n\r\n\r\n    //when searchbutton is clicked\r\n    onSearchClick = () => {\r\n        let filtered_elements = this.getFilteredData('search')\r\n        //stored the filtered elements\r\n        this.setState({ filtered_data: filtered_elements, searching: true });\r\n    }\r\n\r\n\r\n    //when filter button is clicked\r\n    onFilterClick = (event) => {\r\n        let filtered_elements = this.getFilteredData('filter', event.target.name, event.target.id);\r\n        this.setState({ filtered_data: filtered_elements, filtering: true });\r\n        console.log(this.state.filtered_data);\r\n    }\r\n\r\n    getFilteredData = (action, filter_type, filter_value) => {\r\n        let result;\r\n        console.log(action + \" \" + filter_type + ' ' + filter_value)\r\n        //check is searchvalue is not empty and if filtering is false\r\n        if (this.state.searching === false && this.state.filtering === false) {\r\n\r\n            if (action === 'search') {\r\n                console.log('searching' + this.state.searching + this.state.filtering)\r\n                let filtered_elements = this.state.json_data.filter(ele => {\r\n                    //return data that match search criteria\r\n\r\n                    return (ele.schoolname.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.address.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.schoolid.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.pincode.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.landmark.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.area.toLowerCase().includes(this.state.searchValue.toLowerCase()))\r\n                    //console.log(ele.schoolname)\r\n\r\n                })\r\n\r\n                result = filtered_elements;\r\n            }\r\n            else if (action === 'filter') {\r\n                console.log('Filtering')\r\n                let filtered_elements = this.state.json_data.filter(ele => {\r\n                    //return data that match search criteria\r\n\r\n                    return (ele[filter_type] === filter_value)\r\n                    //console.log(ele.schoolname)\r\n\r\n                })\r\n                result = filtered_elements;\r\n                // console.log(result)\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            if (action === 'search') {\r\n                // console.log('search2' + this.state.searching + this.state.filtering)\r\n                let filtered_elements = this.state.filtered_data.filter(ele => {\r\n                    //return data that match search criteria\r\n\r\n                    return (ele.schoolname.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.address.toLowerCase().includes(this.state.searchValue.toLowerCase()) || ele.schoolid.toLowerCase().includes(this.state.searchValue.toLowerCase()))\r\n                    //console.log(ele.schoolname)\r\n\r\n                })\r\n\r\n                result = filtered_elements;\r\n            }\r\n            else if (action === 'filter') {\r\n                let filtered_elements = this.state.filtered_data.filter(ele => {\r\n                    //return data that match search criteria\r\n\r\n                    return (ele[filter_type] === filter_value)\r\n                    //console.log(ele.schoolname)\r\n\r\n                })\r\n                result = filtered_elements;\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    //method to display filter buttton of a specific category\r\n    toggleFilter = (event) => {\r\n        console.log(event.target.id);\r\n        switch (event.target.id) {\r\n            case 'gender': {\r\n                let array = this.getPossibleFilters(event.target.id);\r\n                //console.log(array);\r\n                this.setState({ genderFilters: array, genderToggle: !this.state.genderToggle });\r\n                break;\r\n            }\r\n            case 'category': {\r\n                let array = this.getPossibleFilters(event.target.id);\r\n                this.setState({ categoryFilters: array, categoryToggle: !this.state.categoryToggle });\r\n                break;\r\n            }\r\n            case 'medium_of_inst': {\r\n                let array = this.getPossibleFilters(event.target.id);\r\n                this.setState({ mediumFilters: array, mediumToggle: !this.state.mediumToggle });\r\n                break;\r\n            }\r\n            default:\r\n\r\n        }\r\n        console.log(this.state.genderFilters)\r\n    }\r\n\r\n\r\n    //Method to get all filter values after toggling a specific filter\r\n    getPossibleFilters = (filter) => {\r\n        let set = new Set();\r\n        //if searching and filtering is false get data from original array\r\n        if (this.state.searching === false && this.state.filtering === false) {\r\n            for (let ele in this.state.json_data) {\r\n                set.add(this.state.json_data[ele][filter])\r\n            }\r\n            //console.log(set);\r\n            let array = [...set];\r\n            return array;\r\n        }\r\n        else {\r\n            //if either filtering or searching is true we get data from filtered array\r\n            for (let ele in this.state.filtered_data) {\r\n                set.add(this.state.filtered_data[ele][filter])\r\n            }\r\n\r\n\r\n            let array = [...set];\r\n            //console.log(array);\r\n            return array;\r\n        }\r\n    }\r\n\r\n\r\n    getArray = () => {\r\n        let array = [];\r\n        if (this.state.searching === false && this.state.filtering === false) {\r\n            array = this.state.json_data;\r\n        }\r\n        else {\r\n            array = this.state.filtered_data;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //removes all filters\r\n    removeFilters = () => {\r\n        this.setState({ sorting: false, filtering: false, filtered_data: [] });\r\n    }\r\n\r\n    //sorts data based on filter and direction\r\n    getSortedData = (filterType, direction) => {\r\n        let sorted_data;\r\n        let data = this.getArray();\r\n        if (direction === 'up') {\r\n            //sort in ascending\r\n            sorted_data = data.sort((ele1, ele2) => {\r\n                if (ele1[filterType] > ele2[filterType])\r\n                    return 1;\r\n                else\r\n                    return -1\r\n            })\r\n        }\r\n        else if (direction === 'down') {\r\n            //sort in descending\r\n            sorted_data = data.sort((ele1, ele2) => {\r\n                if (ele1[filterType] < ele2[filterType])\r\n                    return 1;\r\n                else\r\n                    return -1\r\n            })\r\n        }\r\n        this.setState({ filtered_data: sorted_data, sorting: true });\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state.filtering + ' ' + this.state.searching);\r\n        return (\r\n            <>\r\n                <div className=\"main-component\">\r\n\r\n                    <div className=\"buttons\">\r\n\r\n                        <div className=\"search\">\r\n                            <input placeholder='search' type='text' onChange={this.setSearchValue} />\r\n                            <SearchIcon className=\"search-button\" onClick={this.onSearchClick}>search</SearchIcon>\r\n                        </div>\r\n\r\n                        <button onClick={this.removeSearch}>remove search</button>\r\n\r\n                        <button onClick={this.removeFilters}>remove filters</button>\r\n                    </div>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n\r\n                                <th>address<button id='address' name='up' onClick={(event) => this.getSortedData(event.target.id, event.target.name)}>⬆</button><button id='address' name='down' onClick={(event) => this.getSortedData(event.target.id, event.target.name)}>⬇</button></th>\r\n                                <th>area</th>\r\n                                <th>schoolname<button id='schoolname' name='up' onClick={(event) => this.getSortedData(event.target.id, event.target.name)}>⬆</button><button id='schoolname' name='down' onClick={(event) => this.getSortedData(event.target.id, event.target.name)}>⬇</button></th>\r\n                                <th>pincode</th>\r\n                                <th>schoolid</th>\r\n                                <th>landmark</th>\r\n                                <th>\r\n                                    <button onClick={this.toggleFilter} id='gender'>gender</button>\r\n                                    {this.state.genderToggle === true ?\r\n                                        <div className=\"filter\">\r\n                                            {this.state.genderFilters.map(ele => {\r\n                                                return <button className=\"filter\" id={ele} name='gender' onClick={(event) => { this.onFilterClick(event) }}>{ele}</button>\r\n                                            })}\r\n                                        </div> : null\r\n                                    }\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={this.toggleFilter} id='category'>category</button>\r\n                                    {this.state.categoryToggle === true ?\r\n                                        <div className=\"filter\">\r\n                                            {this.state.categoryFilters.map(ele => {\r\n                                                return <button className=\"filter\" id={ele} name='category' onClick={(event) => { this.onFilterClick(event) }}>{ele}</button>\r\n                                            })}\r\n                                        </div> : null\r\n                                    }\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={this.toggleFilter} id='medium_of_inst'>medium_of_inst</button>\r\n                                    {this.state.mediumToggle === true ?\r\n                                        <div className=\"filter\">\r\n                                            {this.state.mediumFilters.map(ele => {\r\n                                                return <button className=\"filter\" id={ele} name='medium_of_inst' onClick={(event) => { this.onFilterClick(event) }}>{ele}</button>\r\n                                            })}\r\n                                        </div> : null\r\n                                    }\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                (this.state.filtering === false && this.state.searching === false && this.state.sorting === false) ?\r\n                                    this.state.json_data.map(ele => {\r\n                                        console.log('original data');\r\n                                        return (\r\n                                            <tr key={ele.schoolid}>\r\n                                                <td>{ele.address}</td>\r\n                                                <td>{ele.area}</td>\r\n                                                <td>{ele.schoolname}</td>\r\n                                                <td>{ele.pincode}</td>\r\n                                                <td>{ele.schoolid}</td>\r\n                                                <td>{ele.landmark}</td>\r\n                                                <td>{ele.gender}</td>\r\n                                                <td>{ele.category}</td>\r\n                                                <td>{ele.medium_of_inst}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                    // console.log(this.state.searching+this.state.filtering);\r\n\r\n                                    : this.state.filtered_data.map(ele => {\r\n                                        console.log('rendering filtered data');\r\n                                        return (\r\n                                            <tr key={ele.schoolid}>\r\n                                                <td>{ele.address}</td>\r\n                                                <td>{ele.area}</td>\r\n                                                <td>{ele.schoolname}</td>\r\n                                                <td>{ele.pincode}</td>\r\n                                                <td>{ele.schoolid}</td>\r\n                                                <td>{ele.landmark}</td>\r\n                                                <td>{ele.gender}</td>\r\n                                                <td>{ele.category}</td>\r\n                                                <td>{ele.medium_of_inst}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n\r\n\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Table from './Containers/Table/Table';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}